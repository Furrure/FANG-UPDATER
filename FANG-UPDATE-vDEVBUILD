'''
Jacob Scrapchansky, Cryptonic Designs, 2019
Fang OS, a terminal based operating system made in python, it has the ability to run
execute multiple programs for your computer, including running other scripts
v0.2 - INDEV
'''

import os #Import Necessary modules
import getpass
import time
import sys
import requests

arguments = sys.argv

user = getpass.getuser() #Define necessary variables
presetv = []
preset = False
prompt_e = ''
if len(arguments) == 1:
	print("Preparing Files...")
fang_a_c = False #Search for Fang_Apps and Fang_Extensions and
fang_e_c = False #creates if does not exist
fang_au_c = False
for x in os.listdir("/Users/" + user):
    if x == 'Fang_Apps':
        fang_a_c = True
    if x == 'Fang_Extensions':
        fang_e_c = True
    if x == 'Fang_Automations':
    	fang_au_c = True

if fang_a_c == False:
    os.mkdir("/Users/" + user + "/Fang_Apps")
if fang_e_c == False:
    os.mkdir("/Users/" + user + "/Fang_Extensions")
if fang_au_c == False:
	os.mkdir("/Users/" + user + "/Fang_Automations")


for x in os.listdir("/Users/" + user + "/Fang_Extensions"): #remove Whitespace from names of all files in Apps/Extensions/Automations
    os.rename("/Users/" + user + "/Fang_Extensions/" + x, "/Users/" + \
              user + "/Fang_Extensions/" + x.replace(' ', ''))
for x in os.listdir("/Users/" + user + "/Fang_Apps"):
    os.rename("/Users/" + user + "/Fang_Apps/" + x, "/Users/" + \
              user + "/Fang_Apps/" + x.replace(' ', ''))
for x in os.listdir("/Users/" + user + "/Fang_Automations"):
	os.rename("/Users/" + user + "/Fang_Automations/" + x, "/Users/" + \
              user + "/Fang_Automations/" + x.replace(' ', ''))

if len(arguments) == 1:
	time.sleep(1)

if len(arguments) == 1:
	os.system("clear") #Clear Terminal
    

extensions = [] #List definitons for extensions
extension_n = []
extensions_a = []

for x in os.listdir("/Users/" + user + "/Fang_Extensions"): #Gather list of extensions
    if x[len(x)-4:] == "fext":
        extensions.append("/Users/" + user + "/Fang_Extensions/" + x)
        extension_n.append(x)


if len(arguments) == 1:
    print() #Boot Text
    print()
    print("Welcome to Fang OS vDEVBUILD,", user)
    print("DEVELOPMENT BUILD -- MAY BE UNSTABLE")
    print("-------------------")

    time.sleep(1)


def prompt(text="Enter your command: ", line=True, prompt_text="> "): #Prompt Func.
    if line == True:
        print("-------------------")
    print(text)
    take_in = input(prompt_text)
    return take_in

def standard_inputs(take_in): #Built in inputs
    
    global presetv #preset command globalize
    global preset
    
    commands = presetv + take_in.strip().split() #Make list of command/args


    
    if len(commands) == 0: #Detect if no input is specified
        print()
        print("No input detected")
        return None



    if commands[0] == 'preset': #Preset command
        if len(commands) >= 2:
            preset = True
            presetv = [commands[1]]
            print('Enter "cancel_preset" to exit preset')
        if len(commands) == 1:
            print()
            inputv = prompt("Enter preset command: ", False)
            if len(inputv.strip()) > 0:
                preset = True
                presetv = [inputv.strip().split()[0]]
                print('Enter "cancel_preset" to exit preset')
            else:
                print('No command detected')
        return commands[0]
    if preset:
        if len(commands) > 1 and preset == True:
            if commands[1] == 'cancel_preset':
                presetv = []
                return commands[0]



    if commands[0] == 'notifications': #Get notifications
        try:
            notifications = requests.get("https://raw.githubusercontent.com/TheWolfgaming86/FANG-ONLINE-RESOURCES/master/NOTIFICATIONS")
            print()
            print(notifications.text)
        except Exception:
            print("Error while trying to get notifications from Fang Repositories")



    if commands[0] == 'termexec': #exec terminal command
        if len(commands) >= 2:
            execvar = ''
            for command in commands:
                if command != "termexec":
                    execvar = execvar + " " + command
            try:
                os.system(execvar[1:])
            except Exception:
                print("Error While executing")
        if len(commands) == 1:
            try:
                os.system(prompt(line=False, text="Enter terminal command"))
            except Exception:
                print("Error While executing")
            return commands[0]



    if commands[0] == 'pyexec': #exec python function
        if len(commands) >= 2:
        	execvar = ''
        	for command in commands:
        		if command != "pyexec":
        			execvar = execvar + " " + command
        	try:
        		exec(execvar[1:])
        	except Exception:
        		print("Error While executing")
        	return commands[0]
        if len(commands) == 1:
        	try:
        		exec(prompt(line=False, text="Enter python command"))
        	except Exception:
        		print("Error While executing")
        	return commands[0]


    

    if commands[0] == 'list': #list command
        if len(commands) == 1:
            print()
            print("fang_apps\nfang_extensions\nfang_automations")
            print()
            get_in = prompt("Input list", line=False)
            if get_in == "fang_extensions":
                print()
                for x in range(len(extension_n)):
                	opened = open("/Users/" + user + "/Fang_Extensions/" + extension_n[x], "r")
                	opened_l = []
                	for c in opened:
                		opened_l.append(c)
                	print(extension_n[x] + "  -  " + opened_l[0][3:len(opened_l[0])-4])
                	opened.close()
                return commands[0]
            if get_in == "fang_apps":
                apps = []
                for x in os.listdir("/Users/" + user + "/Fang_Apps"):
                    if x[len(x)-2:] == 'py':
                        apps.append(x)
                print()
                for x in apps:
                    print(x)
                return commands[0]
            if get_in == "fang_automations":
            	autos = []
            	for x in os.listdir("/Users/" + user + "/Fang_Automations"):
                    if x[len(x)-3:] == 'fen':
                        autos.append(x)
            	print()
            	for x in autos:
                    print(x)
            	return commands[0]
            else:
                print()
                print("Error while listing, try entering from these options: \nfang_extensions \nfang_apps \nfang_automations")
        if len(commands) >= 2:
            if commands[1] == "fang_extensions":
                print()
                for x in range(len(extension_n)):
                	opened = open("/Users/" + user + "/Fang_Extensions/" + extension_n[x], "r")
                	opened_l = []
                	for c in opened:
                		opened_l.append(c)
                	print(extension_n[x] + "  -  " + opened_l[0][3:len(opened_l[0])-4])
                	opened.close()
                return commands[0]
            if commands[1] == "fang_apps":
                apps = []
                for x in os.listdir("/Users/" + user + "/Fang_Apps"):
                    if x[len(x)-2:] == 'py':
                        apps.append(x)
                print()
                for x in apps:
                    print(x)
                return commands[0]
            if commands[1] == "fang_automations":
            	autos = []
            	for x in os.listdir("/Users/" + user + "/Fang_Automations"):
                    if x[len(x)-3:] == 'fen':
                        autos.append(x)
            	print()
            	for x in autos:
                    print(x)
            	return commands[0]

            else:
                print()
                print("Error while listing, try following your statement with: \nfang_extensions \nfang_apps \nfang_automations")

                
    
    if commands[0] == 'help': #help command
        print()
        print("FangOS uses a command based navigation system")
        print("There are currently ten built in commands to use in 0.2 BETA")
        print("clear: no extra arguments needed, \n\tmoves the screen down and presents new prompt")
        print("math [operation]: optional argument, it performs the inputed operation")
        print("load [name]: optional argument, it loads the inputed file name")
        print("list [list name]: optional argument, it lists the available \n\textensions, apps, or automations")
        print("termexec [command line]: optional argument, \n\tit passes the specified command to the terminal")
        print("pyexec [python line]: optional argument, it performs the specified python command")
        print("quit: no extra arguments, it quits back to terminal")
        print("preset [preset command]: optional argument, sets a command before each prompt \n\tfor quick use of one command")
        print("notifications: no arguments needed, shows notifications and alerts from the Fang Repositories")
        print("update [version]: optional argument, downloads and installs the \n\tspecified version of FangOS")
        print("- There are other commands available if they are within your extensions folder")
        return commands[0]

    if commands[0] == 'clear': # Clear prompt
        os.system("clear")
        print()
        print()
        print()
        print("Fang OS vDEVBUILD")
        print("DEVELOPEMENT BUILD -- MAY BE UNSTABLE")
        print("-------------------")
        return commands[0]


    
    if commands[0] == "math": #Calculation
        if len(commands) == 1:
            try:
                print()
                print(eval(prompt("Enter problem", False)))
            except Exception:
                print("Error While computing problem")
        if len(commands) == 2:
            try:
                print(eval(commands[1]))
            except Exception:
                print("error while computing problem")
        elif len(commands) >= 3:
            print("Extra argument detected")
        return commands[0]



    if commands[0] == 'quit': #Quit
        return commands[0]



    if commands[0] == 'update':
        if len(commands) >= 2:
            fang_update(commands[1])
        if len(commands) == 1:
            fang_update()
        return commands[0]



    if commands[0] == 'load': #Load Program
        filesA = []
        filesAu = []
        print()
        if len(commands) == 1:            
            print("Scanning for available Apps and Automations ")
            print()
            time.sleep(0.5)
            for file in os.listdir("/Users/" + user + "/Fang_Apps"):
                if file[len(file)-2:] == "py":
                    filesA.append(file)
            for file in os.listdir("/Users/" + user + "/Fang_Automations"):
                if file[len(file)-3:] == "fen":
                    filesAu.append(file)

            if len(filesA) + len(filesAu) == 0:
                print("No Files Available")
                return commands[0]
            
            
            for x in filesA:
                print(x[:len(x)-3] + " - Fang App (.py)")
            for x in filesAu:
            	print(x[:len(x)-4] + " - Fang Automation (.fen)")

            print()
            file_name = prompt("Input the name of the file from the list above", False)
            if len(file_name) == 0:
                return commands[0]

            print()
            print("Loading " + file_name + "...")
            print()
            time.sleep(0.5)
            for x in filesA:
                if file_name + ".py" == x:
                   try:
                       os.system("python3 " + "/Users/" + user + "/Fang_Apps/" + file_name + ".py")
                   except Exception:
                       print("Error while opening App.")
            for x in filesAu:
                if file_name + ".fen" == x:
                   try:
                       automation_executer("/Users/" + user + "/Fang_Automations/" + file_name + ".fen")
                   except Exception:
                       print("Error while Running.")

        elif len(commands) == 2:
            print()
            print("Loading " + commands[1] + "...")
            print()
            app_load = False
            auto_load = False
            for x in os.listdir("/Users/" + user + "/Fang_Apps"):
            	if commands[1] + ".py" == x:
            		app_load = commands[1] + ".py"
            for x in os.listdir("/Users/" + user + "/Fang_Automations"):
            	if commands[1] + ".fen" == x:
            		auto_load = commands[1] + ".fen"

            if app_load:
            	if app_load[len(app_load)-2:] == "py":
		            try:
		                os.system("python3 " + "/Users/" + user + "/Fang_Apps/" + commands[1] + ".py")
		            except Exception:
		                print("Error while opening program.")
            if auto_load:
            	if auto_load[len(auto_load)-3:] == "fen":
            		try: 
            			automation_executer("/Users/" + user + "/Fang_Automations/" + commands[1] + ".fen")
            		except Exception:
            			print("Error while Running.")
            
        else:
            print("Extra argument detected")
        return commands[0]


    
    if commands[0] != "update" and commands[0] != "load" and commands[0] != "math" and commands[0] != "help" and commands[0] != "list" and commands[0] != "quit" and commands[0] != "clear" and commands[0] != "termexec" and commands[0] != "pyexec" and commands[0] != "setuser" and commands[0] != 'notifications':
         for x in extensions:
             opened = open(x, 'r')
             opened_l = str(opened.read()).strip().split()
             opened.close()
             if opened_l[0] == "'''" + commands[0] + "'''":
                 passto = ''
                 for y in range(len(commands) - 1):
                     passto = passto + " " + commands[y + 1]
                     
                 os.system("python3 " + x + " " + passto)
                 return commands[0]

             
         print("Command not found")
         return None




def automation_executer(path=None): #Execute Fenris automations
	if path == None:
		print("Internal path specification error")
		return None
	read = open(path, "r")
	splited = read.read().strip().split()
	read.close()

	repeat = 0
	cor_file = False
	print("Constructing Formatting")
	time.sleep(0.5)
	for x in splited:
		if x == "FILETYPE=autom":
			cor_file = True

		if x[:7] == "REPEAT=":
			if str(x[7:]) != "endless":
				repeat = int(x[7:])
			else:
				repeat = x[7:]

	if repeat and cor_file == True:
		print("Formatting successful")
		time.sleep(0.2)
		print("Compiling...")
		time.sleep(0.5)
	else:
		print("Incorrect formatting")
		return None

	compiled = []
	record = False
	add_to_compiled = []
	for x in splited[2:]:
		if x == "c::" or x == "d::":
			if record == True and x == "c::":
				print("Closing Statement not found, Stopping process")
				return None	
			record = True
		if record:
			add_to_compiled.append(x)
		if x == ">..":
			record = False
			compiled.append(add_to_compiled)
			add_to_compiled = []

	print("Compiling complete")
	time.sleep(0.5)
	print("Starting...")
	time.sleep(0.5)

	if repeat != "endless":
		for q in range(int(repeat)):
			for x in compiled:
				if x[0] == 'c::':
					command = ''
					disp = False
					for y in x:
						if y != "c::" and y != ">.." and y != "===DISPLAY":
							command = (command + " " + y) if len(command) != 0 else y
						if y == "===DISPLAY":
							disp = True
					if disp:
						print("Executing: " + command)
					com = standard_inputs(command)
					if com == None:
						print("Error detected")
						return None

				if x[0] == 'd::':
						command = ''
						wait = 0
						for y in x:
							if y != "d::" and y != ">.." and y != "===DISPLAY":
								wait = str(float(y) + float(wait))
							if y == "===DISPLAY":
								print("Waited " + wait + " second/s")
							if y != "d::" and y != ">.." and y != "===DISPLAY":
								time.sleep(float(wait))


	elif repeat == "endless":
		while True:
			for x in compiled:
				if x[0] == 'c::':
					command = ''
					disp = False
					for y in x:
						if y != "c::" and y != ">.." and y != "===DISPLAY":
							command = (command + " " + y) if len(command) != 0 else y
						if y == "===DISPLAY":
							disp = True
					if disp:
						print("Executing: " + command)
					com = standard_inputs(command)
					if com == None:
						print("Error detected")
						return None

				if x[0] == 'd::':
						command = ''
						wait = 0
						for y in x:
							if y != "d::" and y != ">.." and y != "===DISPLAY":
								wait = str(float(y) + float(wait))
							if y == "===DISPLAY":
								print("Waited " + wait + " second/s")
							if y != "d::" and y != ">.." and y != "===DISPLAY":
								time.sleep(float(wait))




def fang_update(version_n=False):

    user_n = getpass.getuser()
    print()

    
    print()
    print("Accessing online update packages...")
    if not(version_n):
        print("Make sure your computer is connected to the internet, \nthe update process may take a few minutes, do you want to continue? (y/n)")
        descision = input("> ")
        if descision != 'y':
            return None
        avail_updates = requests.get("https://raw.githubusercontent.com/TheWolfgaming86/FANG-UPDATER/master/AVAILABLE-PACKAGES")
        print()
        print(avail_updates.text)
        version = input("Please enter the version that you want from the list above: ")
        if len(version) == 0:
            version = "v0.2BETA"
    else:
        version = version_n
        

    time.sleep(1)
    update = requests.get("https://raw.githubusercontent.com/TheWolfgaming86/FANG-UPDATER/master/FANG-UPDATE-" + version)
    if update.text == '404: Not Found\n':
        print("Version not found, stopping")
        return None
    print("Putting aside old packages...")
    try:
        os.remove("/Users/" + user_n + "/fang.pyc")
        os.rename("/Users/" + user_n + "/__pycache__", "/Users/" + user_n + "/__pycache__0")
    except Exception:
        pass
    print("Making new file...")
    new_file = open("/Users/" + user_n + "/fang.py", "w")
    new_file.write(update.text)
    new_file.close()
    print("Compiling file...")
    time.sleep(1)
    os.system("python3 -m compileall /Users/" + user_n + "/fang.py")
    try:
        os.rename("/Users/" + user_n + "/__pycache__/" + os.listdir("/Users/" + user_n + "/__pycache__")[0], "/Users/" + user_n + "/fang.pyc")
    except Exception:
        print("Failure while Making new file")
    os.rmdir("/Users/" + user_n + "/__pycache__")
    try:
        os.rename( "/Users/" + user_n + "/__pycache__0", "/Users/" + user_n + "/__pycache__")
    except Exception:
        pass

    os.remove("/Users/" + user_n + "/fang.py")
    print("Finished - " + version)
    time.sleep(0.2)
    print()
    print("To apply changes, please restart FangOS")






		

if len(arguments) == 1:
	while True:
	    if preset == True:
	        prompt_e = presetv[0] + " " if len(presetv) >= 1 else ''
	    command_get = standard_inputs(prompt(" ", line=False, prompt_text="f|: " + prompt_e))
	    if command_get == 'quit':
	        break

if len(arguments) > 1:
    execArgs = ''
    for x in arguments:
    	if x != "fang.py" and x != "fangdev.py" and x !="fang.pyc":
    		execArgs = execArgs + " " + x
    standard_inputs(execArgs[1:])

quit()
